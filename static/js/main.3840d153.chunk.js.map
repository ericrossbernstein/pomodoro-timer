{"version":3,"sources":["utils/duration/index.js","pomodoro/Title.js","pomodoro/TimerCount.js","pomodoro/ProgressBar.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["secondsToDuration","givenSeconds","minutes","Math","floor","toString","padStart","seconds","round","Title","props","timerState","onBreak","breakDuration","focusDuration","stop","data-testid","TimerCount","remainingTime","className","ProgressBar","progressPercent","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","Pomodoro","classNameToBoolean","initialTimerState","play","pause","useState","setTimerState","setOnBreak","setFocusDuration","setBreakDuration","setRemainingTime","setProgressPercent","playTimer","handleDurationClick","abs","prevState","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","swapTimers","percent","findProgressPercent","type","onClick","disabled","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3840d153.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor(givenSeconds / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\n\n// Title hidden when timer is stopped\n// Alternates between Focusing and On Break, depending on session\n\nfunction Title(props) {\n  const { timerState, onBreak, breakDuration, focusDuration } = props;\n  if (!timerState.stop) {\n    if (onBreak) {\n      return (\n        <h2 data-testid=\"session-title\">\n          On Break for {secondsToDuration(breakDuration)} minutes\n        </h2>\n      );\n    } else {\n      return (\n        <h2 data-testid=\"session-title\">\n          Focusing for {secondsToDuration(focusDuration)} minutes\n        </h2>\n      );\n    }\n  } else {\n    return null;\n  }\n}\n\nexport default Title;\n","import React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\n\n// Count hidden when timer is stopped\n\nfunction TimerCount(props) {\n  const { timerState, remainingTime } = props;\n  return (\n    !timerState.stop && (\n      <p className=\"lead\" data-testid=\"session-sub-title\">\n        {secondsToDuration(remainingTime)} remaining\n      </p>\n    )\n  );\n}\n\nexport default TimerCount;\n","import React from \"react\";\n\n// Progress Bar hidden when timer is stopped\n\nfunction ProgressBar(props) {\n  const { timerState, progressPercent } = props;\n  return (\n    !timerState.stop && (\n      <div className=\"progress\" style={{ height: \"20px\" }}>\n        <div\n          className=\"progress-bar\"\n          role=\"progressbar\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          aria-valuenow={progressPercent}\n          style={{ width: `${progressPercent}%` }}\n        />\n      </div>\n    )\n  );\n}\n\nexport default ProgressBar;\n","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport Title from \"./Title.js\";\nimport TimerCount from \"./TimerCount.js\";\nimport ProgressBar from \"./ProgressBar.js\";\n\nfunction Pomodoro() {\n  const initialTimerState = {\n    play: false,\n    pause: false,\n    stop: true,\n  };\n\n  const [timerState, setTimerState] = useState(initialTimerState);\n  const [onBreak, setOnBreak] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(1500);\n  const [breakDuration, setBreakDuration] = useState(300);\n  const [remainingTime, setRemainingTime] = useState(focusDuration);\n  const [progressPercent, setProgressPercent] = useState(0);\n\n  // PLAY settings\n  function playTimer() {\n    setTimerState({\n      play: true,\n      pause: false,\n      stop: false,\n    });\n  }\n\n  // PAUSE settings\n  function pauseTimer() {\n    setTimerState({\n      play: false,\n      pause: true,\n      stop: false,\n    });\n  }\n\n  // STOP settings\n  function stopTimer() {\n    setTimerState(initialTimerState);\n    setOnBreak(false);\n    setProgressPercent(0);\n    setRemainingTime(focusDuration);\n  }\n\n  // Runs on 1-second interval: decreases remainingTime and increases progressPercent\n  // Calls swapTimers function when time reaches zero\n  useInterval(\n    () => {\n      if (remainingTime === 0) {\n        swapTimers();\n      } else {\n        setRemainingTime((prevState) => prevState - 1);\n        findProgressPercent();\n      }\n    },\n    timerState.play ? 1000 : null\n  );\n\n  // Plays audio at the end of each timer\n  // Then swaps between focus and break timers\n  function swapTimers() {\n    const audio = new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`);\n    audio.play();\n    if (!onBreak) {\n      setRemainingTime(breakDuration);\n    } else {\n      setRemainingTime(focusDuration);\n    }\n    setOnBreak((prevState) => !prevState);\n    setProgressPercent(0);\n  }\n\n  // Calculates what percentage of timer is complete\n  function findProgressPercent() {\n    if (onBreak) {\n      const percent = Math.round(\n        ((breakDuration - remainingTime) * 100) / breakDuration\n      );\n      setProgressPercent(percent);\n    } else {\n      const percent = Math.round(\n        ((focusDuration - remainingTime) * 100) / focusDuration\n      );\n      setProgressPercent(percent);\n    }\n  }\n\n  // Play/pause button handler\n  function handlePlayPauseClick() {\n    if (timerState.play) {\n      pauseTimer();\n    } else if (timerState.pause) {\n      playTimer();\n    } else if (timerState.stop) {\n      playTimer();\n      if (onBreak) {\n        setRemainingTime(breakDuration);\n      } else {\n        setRemainingTime(focusDuration);\n      }\n    }\n  }\n\n  // Plus/minus button handler for duration values\n  function handleDurationClick(seconds) {\n    return Math.abs(seconds) > 60\n      ? setFocusDuration((prevState) => prevState + seconds)\n      : setBreakDuration((prevState) => prevState + seconds);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              Focus Duration: {secondsToDuration(focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* FOCUS DURATION MINUS BUTTON */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n                onClick={() => handleDurationClick(-300)}\n                // Disabled when timer is set to play, and value is set to 5 minutes\n                disabled={timerState.play || focusDuration === 300}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* FOCUS DURATION PLUS BUTTON */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n                onClick={() => handleDurationClick(300)}\n                // Disabled when timer is set to play, and value is set to 60 minutes\n                disabled={timerState.play || focusDuration === 3600}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                Break Duration: {secondsToDuration(breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* BREAK DURATION MINUS BUTTON */}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  onClick={() => handleDurationClick(-60)}\n                  // Disabled when timer is set to play, and value is set to 1 minute\n                  disabled={timerState.play || breakDuration === 60}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* BREAK DURATION PLUS BUTTON */}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  onClick={() => handleDurationClick(60)}\n                  // Disabled when timer is set to play, and value is set to 15 minutes\n                  disabled={timerState.play || breakDuration === 900}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            {/* PLAY/PAUSE BUTTON */}\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={handlePlayPauseClick}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !timerState.play,\n                  \"oi-media-pause\": timerState.play,\n                })}\n              />\n            </button>\n            {/* STOP BUTTON */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              disabled={!timerState.play}\n              onClick={stopTimer}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      {/* Following three elements hidden when timer is stopped */}\n      <div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* Timer Title : alternates between Focusing and On Break */}\n            <Title\n              timerState={timerState}\n              onBreak={onBreak}\n              focusDuration={focusDuration}\n              breakDuration={breakDuration}\n            />\n            {/* Timer Count : counts down remaining time */}\n            <TimerCount timerState={timerState} remainingTime={remainingTime} />\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* Progress Bar : displays progress percentage as visual bar */}\n            <ProgressBar\n              timerState={timerState}\n              progressPercent={progressPercent}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}